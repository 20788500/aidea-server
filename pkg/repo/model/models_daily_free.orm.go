package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// ModelsDailyFreeN is a ModelsDailyFree object, all fields are nullable
type ModelsDailyFreeN struct {
	original             *modelsDailyFreeOriginal
	modelsDailyFreeModel *ModelsDailyFreeModel

	Id        null.Int    `json:"id"`
	ModelId   null.String `json:"model_id"`
	Name      null.String `json:"name"`
	Info      null.String `json:"info,omitempty"`
	FreeCount null.Int    `json:"free_count"`
	EndAt     null.Time   `json:"end_at,omitempty"`
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *ModelsDailyFreeN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for ModelsDailyFree
func (inst *ModelsDailyFreeN) SetModel(modelsDailyFreeModel *ModelsDailyFreeModel) {
	inst.modelsDailyFreeModel = modelsDailyFreeModel
}

// modelsDailyFreeOriginal is an object which stores original ModelsDailyFree from database
type modelsDailyFreeOriginal struct {
	Id        null.Int
	ModelId   null.String
	Name      null.String
	Info      null.String
	FreeCount null.Int
	EndAt     null.Time
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *ModelsDailyFreeN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &modelsDailyFreeOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.ModelId != inst.original.ModelId {
			return true
		}
		if inst.Name != inst.original.Name {
			return true
		}
		if inst.Info != inst.original.Info {
			return true
		}
		if inst.FreeCount != inst.original.FreeCount {
			return true
		}
		if inst.EndAt != inst.original.EndAt {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "model_id":
				if inst.ModelId != inst.original.ModelId {
					return true
				}
			case "name":
				if inst.Name != inst.original.Name {
					return true
				}
			case "info":
				if inst.Info != inst.original.Info {
					return true
				}
			case "free_count":
				if inst.FreeCount != inst.original.FreeCount {
					return true
				}
			case "end_at":
				if inst.EndAt != inst.original.EndAt {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *ModelsDailyFreeN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &modelsDailyFreeOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.ModelId != inst.original.ModelId {
			kv["model_id"] = inst.ModelId
		}
		if inst.Name != inst.original.Name {
			kv["name"] = inst.Name
		}
		if inst.Info != inst.original.Info {
			kv["info"] = inst.Info
		}
		if inst.FreeCount != inst.original.FreeCount {
			kv["free_count"] = inst.FreeCount
		}
		if inst.EndAt != inst.original.EndAt {
			kv["end_at"] = inst.EndAt
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "model_id":
				if inst.ModelId != inst.original.ModelId {
					kv["model_id"] = inst.ModelId
				}
			case "name":
				if inst.Name != inst.original.Name {
					kv["name"] = inst.Name
				}
			case "info":
				if inst.Info != inst.original.Info {
					kv["info"] = inst.Info
				}
			case "free_count":
				if inst.FreeCount != inst.original.FreeCount {
					kv["free_count"] = inst.FreeCount
				}
			case "end_at":
				if inst.EndAt != inst.original.EndAt {
					kv["end_at"] = inst.EndAt
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *ModelsDailyFreeN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.modelsDailyFreeModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.modelsDailyFreeModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a models_daily_free
func (inst *ModelsDailyFreeN) Delete(ctx context.Context) error {
	if inst.modelsDailyFreeModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.modelsDailyFreeModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *ModelsDailyFreeN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type modelsDailyFreeScope struct {
	name  string
	apply func(builder query.Condition)
}

var modelsDailyFreeGlobalScopes = make([]modelsDailyFreeScope, 0)
var modelsDailyFreeLocalScopes = make([]modelsDailyFreeScope, 0)

// AddGlobalScopeForModelsDailyFree assign a global scope to a model
func AddGlobalScopeForModelsDailyFree(name string, apply func(builder query.Condition)) {
	modelsDailyFreeGlobalScopes = append(modelsDailyFreeGlobalScopes, modelsDailyFreeScope{name: name, apply: apply})
}

// AddLocalScopeForModelsDailyFree assign a local scope to a model
func AddLocalScopeForModelsDailyFree(name string, apply func(builder query.Condition)) {
	modelsDailyFreeLocalScopes = append(modelsDailyFreeLocalScopes, modelsDailyFreeScope{name: name, apply: apply})
}

func (m *ModelsDailyFreeModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range modelsDailyFreeGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range modelsDailyFreeLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *ModelsDailyFreeModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *ModelsDailyFreeModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type ModelsDailyFree struct {
	Id        int64     `json:"id"`
	ModelId   string    `json:"model_id"`
	Name      string    `json:"name"`
	Info      string    `json:"info,omitempty"`
	FreeCount int64     `json:"free_count"`
	EndAt     time.Time `json:"end_at,omitempty"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w ModelsDailyFree) ToModelsDailyFreeN(allows ...string) ModelsDailyFreeN {
	if len(allows) == 0 {
		return ModelsDailyFreeN{

			Id:        null.IntFrom(int64(w.Id)),
			ModelId:   null.StringFrom(w.ModelId),
			Name:      null.StringFrom(w.Name),
			Info:      null.StringFrom(w.Info),
			FreeCount: null.IntFrom(int64(w.FreeCount)),
			EndAt:     null.TimeFrom(w.EndAt),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := ModelsDailyFreeN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "model_id":
			res.ModelId = null.StringFrom(w.ModelId)
		case "name":
			res.Name = null.StringFrom(w.Name)
		case "info":
			res.Info = null.StringFrom(w.Info)
		case "free_count":
			res.FreeCount = null.IntFrom(int64(w.FreeCount))
		case "end_at":
			res.EndAt = null.TimeFrom(w.EndAt)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w ModelsDailyFree) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *ModelsDailyFreeN) ToModelsDailyFree() ModelsDailyFree {
	return ModelsDailyFree{

		Id:        w.Id.Int64,
		ModelId:   w.ModelId.String,
		Name:      w.Name.String,
		Info:      w.Info.String,
		FreeCount: w.FreeCount.Int64,
		EndAt:     w.EndAt.Time,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// ModelsDailyFreeModel is a model which encapsulates the operations of the object
type ModelsDailyFreeModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var modelsDailyFreeTableName = "models_daily_free"

// ModelsDailyFreeTable return table name for ModelsDailyFree
func ModelsDailyFreeTable() string {
	return modelsDailyFreeTableName
}

const (
	FieldModelsDailyFreeId        = "id"
	FieldModelsDailyFreeModelId   = "model_id"
	FieldModelsDailyFreeName      = "name"
	FieldModelsDailyFreeInfo      = "info"
	FieldModelsDailyFreeFreeCount = "free_count"
	FieldModelsDailyFreeEndAt     = "end_at"
	FieldModelsDailyFreeCreatedAt = "created_at"
	FieldModelsDailyFreeUpdatedAt = "updated_at"
)

// ModelsDailyFreeFields return all fields in ModelsDailyFree model
func ModelsDailyFreeFields() []string {
	return []string{
		"id",
		"model_id",
		"name",
		"info",
		"free_count",
		"end_at",
		"created_at",
		"updated_at",
	}
}

func SetModelsDailyFreeTable(tableName string) {
	modelsDailyFreeTableName = tableName
}

// NewModelsDailyFreeModel create a ModelsDailyFreeModel
func NewModelsDailyFreeModel(db query.Database) *ModelsDailyFreeModel {
	return &ModelsDailyFreeModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           modelsDailyFreeTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *ModelsDailyFreeModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *ModelsDailyFreeModel) clone() *ModelsDailyFreeModel {
	return &ModelsDailyFreeModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *ModelsDailyFreeModel) WithoutGlobalScopes(names ...string) *ModelsDailyFreeModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *ModelsDailyFreeModel) WithLocalScopes(names ...string) *ModelsDailyFreeModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *ModelsDailyFreeModel) Condition(builder query.SQLBuilder) *ModelsDailyFreeModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *ModelsDailyFreeModel) Find(ctx context.Context, id int64) (*ModelsDailyFreeN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *ModelsDailyFreeModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *ModelsDailyFreeModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *ModelsDailyFreeModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]ModelsDailyFreeN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *ModelsDailyFreeModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]ModelsDailyFreeN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"model_id",
			"name",
			"info",
			"free_count",
			"end_at",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "model_id":
			selectFields = append(selectFields, f)
		case "name":
			selectFields = append(selectFields, f)
		case "info":
			selectFields = append(selectFields, f)
		case "free_count":
			selectFields = append(selectFields, f)
		case "end_at":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*ModelsDailyFreeN, []interface{}) {
		var modelsDailyFreeVar ModelsDailyFreeN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &modelsDailyFreeVar.Id)
			case "model_id":
				scanFields = append(scanFields, &modelsDailyFreeVar.ModelId)
			case "name":
				scanFields = append(scanFields, &modelsDailyFreeVar.Name)
			case "info":
				scanFields = append(scanFields, &modelsDailyFreeVar.Info)
			case "free_count":
				scanFields = append(scanFields, &modelsDailyFreeVar.FreeCount)
			case "end_at":
				scanFields = append(scanFields, &modelsDailyFreeVar.EndAt)
			case "created_at":
				scanFields = append(scanFields, &modelsDailyFreeVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &modelsDailyFreeVar.UpdatedAt)
			}
		}

		return &modelsDailyFreeVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	modelsDailyFrees := make([]ModelsDailyFreeN, 0)
	for rows.Next() {
		modelsDailyFreeReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		modelsDailyFreeReal.original = &modelsDailyFreeOriginal{}
		_ = query.Copy(modelsDailyFreeReal, modelsDailyFreeReal.original)

		modelsDailyFreeReal.SetModel(m)
		modelsDailyFrees = append(modelsDailyFrees, *modelsDailyFreeReal)
	}

	return modelsDailyFrees, nil
}

// First return first result for given query
func (m *ModelsDailyFreeModel) First(ctx context.Context, builders ...query.SQLBuilder) (*ModelsDailyFreeN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new models_daily_free to database
func (m *ModelsDailyFreeModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all models_daily_frees to database
func (m *ModelsDailyFreeModel) SaveAll(ctx context.Context, modelsDailyFrees []ModelsDailyFreeN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, modelsDailyFree := range modelsDailyFrees {
		id, err := m.Save(ctx, modelsDailyFree)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a models_daily_free to database
func (m *ModelsDailyFreeModel) Save(ctx context.Context, modelsDailyFree ModelsDailyFreeN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, modelsDailyFree.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new models_daily_free or update it when it has a id > 0
func (m *ModelsDailyFreeModel) SaveOrUpdate(ctx context.Context, modelsDailyFree ModelsDailyFreeN, onlyFields ...string) (id int64, updated bool, err error) {
	if modelsDailyFree.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, modelsDailyFree.Id.Int64, modelsDailyFree, onlyFields...)
		return modelsDailyFree.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, modelsDailyFree, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *ModelsDailyFreeModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *ModelsDailyFreeModel) Update(ctx context.Context, builder query.SQLBuilder, modelsDailyFree ModelsDailyFreeN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, modelsDailyFree.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *ModelsDailyFreeModel) UpdateById(ctx context.Context, id int64, modelsDailyFree ModelsDailyFreeN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, modelsDailyFree.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *ModelsDailyFreeModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *ModelsDailyFreeModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
