package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// ChatMessagesShareN is a ChatMessagesShare object, all fields are nullable
type ChatMessagesShareN struct {
	original               *chatMessagesShareOriginal
	chatMessagesShareModel *ChatMessagesShareModel

	Id        null.Int    `json:"id"`
	UserId    null.Int    `json:"user_id,omitempty"`
	Data      null.String `json:"data,omitempty"`
	Code      null.String `json:"code"`
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *ChatMessagesShareN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for ChatMessagesShare
func (inst *ChatMessagesShareN) SetModel(chatMessagesShareModel *ChatMessagesShareModel) {
	inst.chatMessagesShareModel = chatMessagesShareModel
}

// chatMessagesShareOriginal is an object which stores original ChatMessagesShare from database
type chatMessagesShareOriginal struct {
	Id        null.Int
	UserId    null.Int
	Data      null.String
	Code      null.String
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *ChatMessagesShareN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &chatMessagesShareOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Data != inst.original.Data {
			return true
		}
		if inst.Code != inst.original.Code {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "data":
				if inst.Data != inst.original.Data {
					return true
				}
			case "code":
				if inst.Code != inst.original.Code {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *ChatMessagesShareN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &chatMessagesShareOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Data != inst.original.Data {
			kv["data"] = inst.Data
		}
		if inst.Code != inst.original.Code {
			kv["code"] = inst.Code
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "data":
				if inst.Data != inst.original.Data {
					kv["data"] = inst.Data
				}
			case "code":
				if inst.Code != inst.original.Code {
					kv["code"] = inst.Code
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *ChatMessagesShareN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.chatMessagesShareModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.chatMessagesShareModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a chat_messages_share
func (inst *ChatMessagesShareN) Delete(ctx context.Context) error {
	if inst.chatMessagesShareModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.chatMessagesShareModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *ChatMessagesShareN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type chatMessagesShareScope struct {
	name  string
	apply func(builder query.Condition)
}

var chatMessagesShareGlobalScopes = make([]chatMessagesShareScope, 0)
var chatMessagesShareLocalScopes = make([]chatMessagesShareScope, 0)

// AddGlobalScopeForChatMessagesShare assign a global scope to a model
func AddGlobalScopeForChatMessagesShare(name string, apply func(builder query.Condition)) {
	chatMessagesShareGlobalScopes = append(chatMessagesShareGlobalScopes, chatMessagesShareScope{name: name, apply: apply})
}

// AddLocalScopeForChatMessagesShare assign a local scope to a model
func AddLocalScopeForChatMessagesShare(name string, apply func(builder query.Condition)) {
	chatMessagesShareLocalScopes = append(chatMessagesShareLocalScopes, chatMessagesShareScope{name: name, apply: apply})
}

func (m *ChatMessagesShareModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range chatMessagesShareGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range chatMessagesShareLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *ChatMessagesShareModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *ChatMessagesShareModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type ChatMessagesShare struct {
	Id        int64  `json:"id"`
	UserId    int64  `json:"user_id,omitempty"`
	Data      string `json:"data,omitempty"`
	Code      string `json:"code"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w ChatMessagesShare) ToChatMessagesShareN(allows ...string) ChatMessagesShareN {
	if len(allows) == 0 {
		return ChatMessagesShareN{

			Id:        null.IntFrom(int64(w.Id)),
			UserId:    null.IntFrom(int64(w.UserId)),
			Data:      null.StringFrom(w.Data),
			Code:      null.StringFrom(w.Code),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := ChatMessagesShareN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "data":
			res.Data = null.StringFrom(w.Data)
		case "code":
			res.Code = null.StringFrom(w.Code)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w ChatMessagesShare) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *ChatMessagesShareN) ToChatMessagesShare() ChatMessagesShare {
	return ChatMessagesShare{

		Id:        w.Id.Int64,
		UserId:    w.UserId.Int64,
		Data:      w.Data.String,
		Code:      w.Code.String,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// ChatMessagesShareModel is a model which encapsulates the operations of the object
type ChatMessagesShareModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var chatMessagesShareTableName = "chat_messages_share"

// ChatMessagesShareTable return table name for ChatMessagesShare
func ChatMessagesShareTable() string {
	return chatMessagesShareTableName
}

const (
	FieldChatMessagesShareId        = "id"
	FieldChatMessagesShareUserId    = "user_id"
	FieldChatMessagesShareData      = "data"
	FieldChatMessagesShareCode      = "code"
	FieldChatMessagesShareCreatedAt = "created_at"
	FieldChatMessagesShareUpdatedAt = "updated_at"
)

// ChatMessagesShareFields return all fields in ChatMessagesShare model
func ChatMessagesShareFields() []string {
	return []string{
		"id",
		"user_id",
		"data",
		"code",
		"created_at",
		"updated_at",
	}
}

func SetChatMessagesShareTable(tableName string) {
	chatMessagesShareTableName = tableName
}

// NewChatMessagesShareModel create a ChatMessagesShareModel
func NewChatMessagesShareModel(db query.Database) *ChatMessagesShareModel {
	return &ChatMessagesShareModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           chatMessagesShareTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *ChatMessagesShareModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *ChatMessagesShareModel) clone() *ChatMessagesShareModel {
	return &ChatMessagesShareModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *ChatMessagesShareModel) WithoutGlobalScopes(names ...string) *ChatMessagesShareModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *ChatMessagesShareModel) WithLocalScopes(names ...string) *ChatMessagesShareModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *ChatMessagesShareModel) Condition(builder query.SQLBuilder) *ChatMessagesShareModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *ChatMessagesShareModel) Find(ctx context.Context, id int64) (*ChatMessagesShareN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *ChatMessagesShareModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *ChatMessagesShareModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *ChatMessagesShareModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]ChatMessagesShareN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *ChatMessagesShareModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]ChatMessagesShareN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"data",
			"code",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "data":
			selectFields = append(selectFields, f)
		case "code":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*ChatMessagesShareN, []interface{}) {
		var chatMessagesShareVar ChatMessagesShareN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &chatMessagesShareVar.Id)
			case "user_id":
				scanFields = append(scanFields, &chatMessagesShareVar.UserId)
			case "data":
				scanFields = append(scanFields, &chatMessagesShareVar.Data)
			case "code":
				scanFields = append(scanFields, &chatMessagesShareVar.Code)
			case "created_at":
				scanFields = append(scanFields, &chatMessagesShareVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &chatMessagesShareVar.UpdatedAt)
			}
		}

		return &chatMessagesShareVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	chatMessagesShares := make([]ChatMessagesShareN, 0)
	for rows.Next() {
		chatMessagesShareReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		chatMessagesShareReal.original = &chatMessagesShareOriginal{}
		_ = query.Copy(chatMessagesShareReal, chatMessagesShareReal.original)

		chatMessagesShareReal.SetModel(m)
		chatMessagesShares = append(chatMessagesShares, *chatMessagesShareReal)
	}

	return chatMessagesShares, nil
}

// First return first result for given query
func (m *ChatMessagesShareModel) First(ctx context.Context, builders ...query.SQLBuilder) (*ChatMessagesShareN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new chat_messages_share to database
func (m *ChatMessagesShareModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all chat_messages_shares to database
func (m *ChatMessagesShareModel) SaveAll(ctx context.Context, chatMessagesShares []ChatMessagesShareN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, chatMessagesShare := range chatMessagesShares {
		id, err := m.Save(ctx, chatMessagesShare)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a chat_messages_share to database
func (m *ChatMessagesShareModel) Save(ctx context.Context, chatMessagesShare ChatMessagesShareN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, chatMessagesShare.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new chat_messages_share or update it when it has a id > 0
func (m *ChatMessagesShareModel) SaveOrUpdate(ctx context.Context, chatMessagesShare ChatMessagesShareN, onlyFields ...string) (id int64, updated bool, err error) {
	if chatMessagesShare.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, chatMessagesShare.Id.Int64, chatMessagesShare, onlyFields...)
		return chatMessagesShare.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, chatMessagesShare, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *ChatMessagesShareModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *ChatMessagesShareModel) Update(ctx context.Context, builder query.SQLBuilder, chatMessagesShare ChatMessagesShareN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, chatMessagesShare.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *ChatMessagesShareModel) UpdateById(ctx context.Context, id int64, chatMessagesShare ChatMessagesShareN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, chatMessagesShare.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *ChatMessagesShareModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *ChatMessagesShareModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
